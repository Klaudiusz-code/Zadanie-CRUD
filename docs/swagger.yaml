
openapi: 3.0.0
info:
  title: API Users
  version: 1.0.0
  description: API for managing user data
  contact:
    name: Klaudiusz
    email: klaudiusz.adamaszek@onet.pl
servers:
  - url: http://localhost:3000
    description: Development server
components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        age:
          type: number
paths:
  "/users":
    get:
      summary: Get all users
      description: Retrieve a list of all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/User"
    post:
      summary: Add a new user
      description: Add a new user to the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
        '400':
          description: Invalid request body
        '500':
          description: Server error
  "/users/{id}":
    get:
      summary: Get a user by ID
      description: Retrieve a single user by their ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User not found
    put:
      summary: Update a user by ID
      description: Update an existing user with new information
      parameters:
        - in: path
          name: id
          description: ID of the user to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
        '404':
          description: User not found
    delete:
      summary: Delete a user by ID
      description: Delete an existing user by ID
      parameters:
        - in: path
          name: id
          description: ID of the user to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
